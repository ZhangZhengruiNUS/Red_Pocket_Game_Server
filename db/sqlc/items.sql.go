// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: items.sql

package db

import (
	"context"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (
  item_name,
  item_price,
  creator_id
) VALUES (
  $1, $2, $3
)
RETURNING id, item_name, item_price, create_time, creator_id
`

type CreateItemParams struct {
	ItemName  string `json:"itemName"`
	ItemPrice int32  `json:"itemPrice"`
	CreatorID int64  `json:"creatorId"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem, arg.ItemName, arg.ItemPrice, arg.CreatorID)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemName,
		&i.ItemPrice,
		&i.CreateTime,
		&i.CreatorID,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteItemStmt, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, item_name, item_price, create_time, creator_id FROM items
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetItem(ctx context.Context, id int64) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.ItemName,
		&i.ItemPrice,
		&i.CreateTime,
		&i.CreatorID,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, item_name, item_price, create_time, creator_id FROM items
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.query(ctx, q.listItemsStmt, listItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.ItemName,
			&i.ItemPrice,
			&i.CreateTime,
			&i.CreatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :exec
UPDATE items
  set item_name = $2,
  item_price = $3
WHERE id = $1
`

type UpdateItemParams struct {
	ID        int64  `json:"id"`
	ItemName  string `json:"itemName"`
	ItemPrice int32  `json:"itemPrice"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) error {
	_, err := q.exec(ctx, q.updateItemStmt, updateItem, arg.ID, arg.ItemName, arg.ItemPrice)
	return err
}
