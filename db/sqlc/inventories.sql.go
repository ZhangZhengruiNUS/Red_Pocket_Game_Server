// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: inventories.sql

package db

import (
	"context"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventories (
  user_id,
  item_id,
  quantity
) VALUES (
  $1, $2, $3
)
RETURNING inventory_id, user_id, item_id, quantity, create_time
`

type CreateInventoryParams struct {
	UserID   int64 `json:"userId"`
	ItemID   int64 `json:"itemId"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.queryRow(ctx, q.createInventoryStmt, createInventory, arg.UserID, arg.ItemID, arg.Quantity)
	var i Inventory
	err := row.Scan(
		&i.InventoryID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
		&i.CreateTime,
	)
	return i, err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM inventories
WHERE inventory_id = $1
`

func (q *Queries) DeleteInventory(ctx context.Context, inventoryID int64) error {
	_, err := q.exec(ctx, q.deleteInventoryStmt, deleteInventory, inventoryID)
	return err
}

const getInventory = `-- name: GetInventory :one
SELECT inventory_id, user_id, item_id, quantity, create_time FROM inventories
WHERE inventory_id = $1 LIMIT 1
`

func (q *Queries) GetInventory(ctx context.Context, inventoryID int64) (Inventory, error) {
	row := q.queryRow(ctx, q.getInventoryStmt, getInventory, inventoryID)
	var i Inventory
	err := row.Scan(
		&i.InventoryID,
		&i.UserID,
		&i.ItemID,
		&i.Quantity,
		&i.CreateTime,
	)
	return i, err
}

const listInventories = `-- name: ListInventories :many
SELECT inventory_id, user_id, item_id, quantity, create_time FROM inventories
ORDER BY inventory_id
LIMIT $1
OFFSET $2
`

type ListInventoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInventories(ctx context.Context, arg ListInventoriesParams) ([]Inventory, error) {
	rows, err := q.query(ctx, q.listInventoriesStmt, listInventories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Inventory
	for rows.Next() {
		var i Inventory
		if err := rows.Scan(
			&i.InventoryID,
			&i.UserID,
			&i.ItemID,
			&i.Quantity,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
