// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: manage.sql

package db

import (
	"context"
)

const createDiffLv = `-- name: CreateDiffLv :one
INSERT INTO game_difficulty_settings (
    diff_lv,
    award_density,
    enemy_density
) VALUES (
  $1, $2, $3
)
RETURNING diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time
`

type CreateDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	AwardDensity int32 `json:"awardDensity"`
	EnemyDensity int32 `json:"enemyDensity"`
}

func (q *Queries) CreateDiffLv(ctx context.Context, arg CreateDiffLvParams) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.createDiffLvStmt, createDiffLv, arg.DiffLv, arg.AwardDensity, arg.EnemyDensity)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const createPrize = `-- name: CreatePrize :one
INSERT INTO prizes (
    prize_name,
    pic_path,
    weight
) VALUES (
  $1, $2, $3
)
RETURNING prize_id, prize_name, pic_path, weight, reviser_id, revise_time, creator_id, create_time
`

type CreatePrizeParams struct {
	PrizeName string `json:"prizeName"`
	PicPath   string `json:"picPath"`
	Weight    int32  `json:"weight"`
}

func (q *Queries) CreatePrize(ctx context.Context, arg CreatePrizeParams) (Prize, error) {
	row := q.queryRow(ctx, q.createPrizeStmt, createPrize, arg.PrizeName, arg.PicPath, arg.Weight)
	var i Prize
	err := row.Scan(
		&i.PrizeID,
		&i.PrizeName,
		&i.PicPath,
		&i.Weight,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const deleteDiffLv = `-- name: DeleteDiffLv :exec
DELETE FROM game_difficulty_settings
WHERE diff_lv = $1
AND award_density = $2
AND enemy_density = $3
`

type DeleteDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	AwardDensity int32 `json:"awardDensity"`
	EnemyDensity int32 `json:"enemyDensity"`
}

func (q *Queries) DeleteDiffLv(ctx context.Context, arg DeleteDiffLvParams) error {
	_, err := q.exec(ctx, q.deleteDiffLvStmt, deleteDiffLv, arg.DiffLv, arg.AwardDensity, arg.EnemyDensity)
	return err
}

const deletePrize = `-- name: DeletePrize :exec
DELETE FROM prizes
WHERE prize_name = $1
`

func (q *Queries) DeletePrize(ctx context.Context, prizeName string) error {
	_, err := q.exec(ctx, q.deletePrizeStmt, deletePrize, prizeName)
	return err
}

const getItemByItemName = `-- name: GetItemByItemName :one
SELECT item_id, item_name, describe, pic_path, price, reviser_id, revise_time, creator_id, create_time FROM items
WHERE item_name = $1 LIMIT 1
`

func (q *Queries) GetItemByItemName(ctx context.Context, itemName string) (Item, error) {
	row := q.queryRow(ctx, q.getItemByItemNameStmt, getItemByItemName, itemName)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.ItemName,
		&i.Describe,
		&i.PicPath,
		&i.Price,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const getPrizeByPrizeName = `-- name: GetPrizeByPrizeName :one
SELECT prize_id, prize_name, pic_path, weight, reviser_id, revise_time, creator_id, create_time FROM prizes
WHERE prize_name = $1 LIMIT 1
`

func (q *Queries) GetPrizeByPrizeName(ctx context.Context, prizeName string) (Prize, error) {
	row := q.queryRow(ctx, q.getPrizeByPrizeNameStmt, getPrizeByPrizeName, prizeName)
	var i Prize
	err := row.Scan(
		&i.PrizeID,
		&i.PrizeName,
		&i.PicPath,
		&i.Weight,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const listGameDiffSetsByDiffLv = `-- name: ListGameDiffSetsByDiffLv :one
SELECT diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time FROM game_difficulty_settings
WHERE diff_lv = $1
`

func (q *Queries) ListGameDiffSetsByDiffLv(ctx context.Context, diffLv int32) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.listGameDiffSetsByDiffLvStmt, listGameDiffSetsByDiffLv, diffLv)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const updateDiffLv = `-- name: UpdateDiffLv :one
UPDATE game_difficulty_settings
SET award_density = $2, enemy_density = $3
WHERE diff_lv = $1
RETURNING diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time
`

type UpdateDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	Awarddensity int32 `json:"awarddensity"`
	Enemydensity int32 `json:"enemydensity"`
}

func (q *Queries) UpdateDiffLv(ctx context.Context, arg UpdateDiffLvParams) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.updateDiffLvStmt, updateDiffLv, arg.DiffLv, arg.Awarddensity, arg.Enemydensity)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const updateItem = `-- name: UpdateItem :one
UPDATE items
SET item_name = $1, describe = $2, price = $3, pic_path = $4
WHERE item_id = $5
RETURNING item_id, item_name, describe, pic_path, price, reviser_id, revise_time, creator_id, create_time
`

type UpdateItemParams struct {
	Itemname string `json:"itemname"`
	Describe string `json:"describe"`
	Price    int32  `json:"price"`
	Picpath  string `json:"picpath"`
	ItemID   int64  `json:"itemId"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.updateItemStmt, updateItem,
		arg.Itemname,
		arg.Describe,
		arg.Price,
		arg.Picpath,
		arg.ItemID,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.ItemName,
		&i.Describe,
		&i.PicPath,
		&i.Price,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const updatePrize = `-- name: UpdatePrize :one
UPDATE prizes
SET pic_path = $1, weight = $2
WHERE prize_name = $3
RETURNING prize_id, prize_name, pic_path, weight, reviser_id, revise_time, creator_id, create_time
`

type UpdatePrizeParams struct {
	Picpath   string `json:"picpath"`
	Weight    int32  `json:"weight"`
	PrizeName string `json:"prizeName"`
}

func (q *Queries) UpdatePrize(ctx context.Context, arg UpdatePrizeParams) (Prize, error) {
	row := q.queryRow(ctx, q.updatePrizeStmt, updatePrize, arg.Picpath, arg.Weight, arg.PrizeName)
	var i Prize
	err := row.Scan(
		&i.PrizeID,
		&i.PrizeName,
		&i.PicPath,
		&i.Weight,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}
