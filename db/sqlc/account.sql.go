// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  username,
  password,
  role_type
) VALUES (
  $1, $2, $3
)
RETURNING id, username, password, role_type, create_time
`

type CreateAccountParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
	RoleType int32  `json:"roleType"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.queryRow(ctx, q.createAccountStmt, createAccount, arg.Username, arg.Password, arg.RoleType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RoleType,
		&i.CreateTime,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteAuthorStmt, deleteAuthor, id)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, username, password, role_type, create_time FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id int64) (Account, error) {
	row := q.queryRow(ctx, q.getAccountByIdStmt, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RoleType,
		&i.CreateTime,
	)
	return i, err
}

const getAccountByName = `-- name: GetAccountByName :one
SELECT id, username, password, role_type, create_time FROM accounts
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAccountByName(ctx context.Context, username string) (Account, error) {
	row := q.queryRow(ctx, q.getAccountByNameStmt, getAccountByName, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RoleType,
		&i.CreateTime,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, password, role_type, create_time FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.query(ctx, q.listAccountsStmt, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.RoleType,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountPwd = `-- name: UpdateAccountPwd :exec
UPDATE accounts
  set password = $2
WHERE id = $1
`

type UpdateAccountPwdParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateAccountPwd(ctx context.Context, arg UpdateAccountPwdParams) error {
	_, err := q.exec(ctx, q.updateAccountPwdStmt, updateAccountPwd, arg.ID, arg.Password)
	return err
}
