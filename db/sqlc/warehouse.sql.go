// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: warehouse.sql

package db

import (
	"context"
)

const listWarehouse01ByUserID = `-- name: ListWarehouse01ByUserID :one
SELECT credit, coupon FROM users
WHERE user_id = $1 LIMIT 1
`

type ListWarehouse01ByUserIDRow struct {
	Credit int32 `json:"credit"`
	Coupon int32 `json:"coupon"`
}

func (q *Queries) ListWarehouse01ByUserID(ctx context.Context, userID int64) (ListWarehouse01ByUserIDRow, error) {
	row := q.queryRow(ctx, q.listWarehouse01ByUserIDStmt, listWarehouse01ByUserID, userID)
	var i ListWarehouse01ByUserIDRow
	err := row.Scan(&i.Credit, &i.Coupon)
	return i, err
}

const listWarehouse02ByUserID = `-- name: ListWarehouse02ByUserID :many
SELECT t1.item_id, COALESCE(t2.item_name, ' '), COALESCE(t2.describe, ' '), t1.quantity, COALESCE(t2.price, ' '), COALESCE(t2.pic_path, ' ')  FROM inventories t1
LEFT JOIN items t2 ON t1.item_id = t2.item_id
WHERE user_id = $3
ORDER BY t1.item_id
LIMIT $1
OFFSET $2
`

type ListWarehouse02ByUserIDParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	UserID int64 `json:"userId"`
}

type ListWarehouse02ByUserIDRow struct {
	ItemID   int64  `json:"itemId"`
	ItemName string `json:"itemName"`
	Describe string `json:"describe"`
	Quantity int32  `json:"quantity"`
	Price    int32  `json:"price"`
	PicPath  string `json:"picPath"`
}

func (q *Queries) ListWarehouse02ByUserID(ctx context.Context, arg ListWarehouse02ByUserIDParams) ([]ListWarehouse02ByUserIDRow, error) {
	rows, err := q.query(ctx, q.listWarehouse02ByUserIDStmt, listWarehouse02ByUserID, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWarehouse02ByUserIDRow{}
	for rows.Next() {
		var i ListWarehouse02ByUserIDRow
		if err := rows.Scan(
			&i.ItemID,
			&i.ItemName,
			&i.Describe,
			&i.Quantity,
			&i.Price,
			&i.PicPath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
