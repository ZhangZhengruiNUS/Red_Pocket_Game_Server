// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: game_difficulty_settings.sql

package db

import (
	"context"
)

const createDiffLv = `-- name: CreateDiffLv :one
INSERT INTO game_difficulty_settings (
    diff_lv,
    award_density,
    enemy_density
) VALUES (
  $1, $2, $3
)
RETURNING diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time
`

type CreateDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	AwardDensity int32 `json:"awardDensity"`
	EnemyDensity int32 `json:"enemyDensity"`
}

func (q *Queries) CreateDiffLv(ctx context.Context, arg CreateDiffLvParams) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.createDiffLvStmt, createDiffLv, arg.DiffLv, arg.AwardDensity, arg.EnemyDensity)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const deleteDiffLv = `-- name: DeleteDiffLv :exec
DELETE FROM game_difficulty_settings
WHERE diff_lv = $1
AND award_density = $2
AND enemy_density = $3
`

type DeleteDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	AwardDensity int32 `json:"awardDensity"`
	EnemyDensity int32 `json:"enemyDensity"`
}

func (q *Queries) DeleteDiffLv(ctx context.Context, arg DeleteDiffLvParams) error {
	_, err := q.exec(ctx, q.deleteDiffLvStmt, deleteDiffLv, arg.DiffLv, arg.AwardDensity, arg.EnemyDensity)
	return err
}

const listGameDiffSets = `-- name: ListGameDiffSets :many
SELECT diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time FROM game_difficulty_settings
ORDER BY diff_lv
LIMIT $2::int
OFFSET (($1::int - 1) * $2::int)
`

type ListGameDiffSetsParams struct {
	Page     int32 `json:"page"`
	Pagesize int32 `json:"pagesize"`
}

func (q *Queries) ListGameDiffSets(ctx context.Context, arg ListGameDiffSetsParams) ([]GameDifficultySetting, error) {
	rows, err := q.query(ctx, q.listGameDiffSetsStmt, listGameDiffSets, arg.Page, arg.Pagesize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GameDifficultySetting{}
	for rows.Next() {
		var i GameDifficultySetting
		if err := rows.Scan(
			&i.DiffLv,
			&i.AwardDensity,
			&i.EnemyDensity,
			&i.ReviserID,
			&i.ReviseTime,
			&i.CreatorID,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGameDiffSetsByDiffLv = `-- name: ListGameDiffSetsByDiffLv :one
SELECT diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time FROM game_difficulty_settings
WHERE diff_lv = $1
`

func (q *Queries) ListGameDiffSetsByDiffLv(ctx context.Context, diffLv int32) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.listGameDiffSetsByDiffLvStmt, listGameDiffSetsByDiffLv, diffLv)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}

const updateDiffLv = `-- name: UpdateDiffLv :one
UPDATE game_difficulty_settings
SET award_density = $2, enemy_density = $3
WHERE diff_lv = $1
RETURNING diff_lv, award_density, enemy_density, reviser_id, revise_time, creator_id, create_time
`

type UpdateDiffLvParams struct {
	DiffLv       int32 `json:"diffLv"`
	Awarddensity int32 `json:"awarddensity"`
	Enemydensity int32 `json:"enemydensity"`
}

func (q *Queries) UpdateDiffLv(ctx context.Context, arg UpdateDiffLvParams) (GameDifficultySetting, error) {
	row := q.queryRow(ctx, q.updateDiffLvStmt, updateDiffLv, arg.DiffLv, arg.Awarddensity, arg.Enemydensity)
	var i GameDifficultySetting
	err := row.Scan(
		&i.DiffLv,
		&i.AwardDensity,
		&i.EnemyDensity,
		&i.ReviserID,
		&i.ReviseTime,
		&i.CreatorID,
		&i.CreateTime,
	)
	return i, err
}
